@model IEnumerable<InvBackend.Models.QrtRevModel>

<head>
    @* <link rel="stylesheet" href="~/css/all.min.css" /> *@
    @* <link rel="stylesheet" href="~/css/bootstrap.min.css" /> *@
    @* <link rel="stylesheet" href="~/css/text_selection.css" /> *@
    <style>
        .row {
            margin-bottom: 10px; 
        }

        .pagination-container {
            display: flex;
            justify-content: center;
            margin-top: 15px;
        }
        .page-info {
            margin: 0 15px;
            align-self: center;
        }
        .pagination-button {
            margin: 0 5px;
        }
        .pagination-button:disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }
    </style>
</head>

<div class="row">
    <!-- Pie & Bar chart -->
    <div class="col-6">
        <figure class="highcharts-figure">
            <div class="container" id="pie_chart"></div>
        </figure>

        <figure class="highcharts-figure">
            <div class="container" id="bar_chart"></div>
        </figure>
    </div>

    <!-- CRUD with MySQL-->
    <div class="col-6 mt-1 ">
        <div class="card">
            <div class="card-body">
                <form id="industryForm" action="/QrtRev/Details" method="GET">
                    <select name="industry" id="industrySelect" class="form-select">
                        <option value="" selected disabled>--請選擇產業</option>
                        <option value="水泥工業">水泥工業</option>
                        <option value="食品工業">食品工業</option>
                        <option value="塑膠工業">塑膠工業</option>
                        <option value="建材營造">建材營造</option>
                        <option value="汽車工業">汽車工業</option>
                        <option value="其他">其他</option>
                        <option value="紡織纖維">紡織纖維</option>
                        <option value="運動休閒">運動休閒</option>
                        <option value="電子零組件業">電子零組件業</option>
                        <option value="電機機械">電機機械</option>
                        <option value="電器電纜">電器電纜</option>
                        <option value="生技醫療業">生技醫療業</option>
                        <option value="化學工業">化學工業</option>
                        <option value="玻璃陶瓷">玻璃陶瓷</option>
                        <option value="造紙工業">造紙工業</option>
                        <option value="鋼鐵工業">鋼鐵工業</option>
                        <option value="居家生活">居家生活</option>
                        <option value="橡膠工業">橡膠工業</option>
                        <option value="航運業">航運業</option>
                        <option value="電腦及週邊設備業">電腦及週邊設備業</option>
                        <option value="半導體業">半導體業</option>
                        <option value="其他電子業">其他電子業</option>
                        <option value="通信網路業">通信網路業</option>
                        <option value="光電業">光電業</option>
                        <option value="電子通路業">電子通路業</option>
                        <option value="資訊服務業">資訊服務業</option>
                        <option value="貿易百貨">貿易百貨</option>
                        <option value="油電燃氣業">油電燃氣業</option>
                        <option value="觀光餐旅">觀光餐旅</option>
                        <option value="金融保險業">金融保險業</option>
                        <option value="數位雲端">數位雲端</option>
                        <option value="綠能環保">綠能環保</option>
                    </select>
                </form>
            </div>
        
            <table id="dataTable" class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>股票代碼</th>
                        <th>公司名稱</th>
                        <th>產業</th>
                        <th>EPS</th>
                        <th>營業收入</th>
                        <th>營業利益</th>
                        <th>營業外收入及支出</th>
                        <th>稅後淨利</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr class="table-row">
                            <td>
                                @Html.DisplayFor(modelItem => item.Id)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.CompanyName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Industry)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Eps)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.OperatingRev)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.OperatingProfit)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.NonOperating)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.NetIncome)
                            </td>
                            <td>
                                @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                                @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                                @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Pagination Controls -->
            <div class="pagination-container">
                <button id="prevButton" class="btn btn-primary pagination-button">
                    <i class="fas fa-chevron-left"></i> 上一頁
                </button>
                <div class="page-info">
                    <span id="currentPage">1</span> / <span id="totalPages"></span>
                </div>
                <button id="nextButton" class="btn btn-primary pagination-button">
                    下一頁 <i class="fas fa-chevron-right"></i>
                </button>
            </div>
         </div>
    </div>
</div>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

<script src="~/js/graphChart.js"></script>
<script src="~/js/pieChartMore.js"></script>
<script src="~/js/export_data.js"></script>
<script src="~/js/exporting.js"></script>
<script src="~/js/accessibilty.js"></script>
<script src="~/js/variwide.js"></script>

<script src="~/js/chartFunc/barFunc.js"></script>
<script src="~/js/chartFunc/pieFunc.js"></script>

<script>
    // Prepare data for charts
    const companyNames = [@Html.Raw(string.Join(",", Model.Select(item => $"'{item.CompanyName}'")))];
    const operatingRevData = [@Html.Raw(string.Join(",", Model.Select(item => item.OperatingRev)))];
    const operatingProfitData = [@Html.Raw(string.Join(",", Model.Select(item => item.OperatingProfit)))];
    const nonOperatingData = [@Html.Raw(string.Join(",", Model.Select(item => item.NonOperating)))];
    const epsData = [@Html.Raw(string.Join(",", Model.Select(item => item.Eps)))];
    const netIncomeData = [@Html.Raw(string.Join(",", Model.Select(item => item.NetIncome)))];

    // Calculate operating costs (revenue minus profit)
    const operatingCostData = operatingRevData.map((rev, index) => rev - operatingProfitData[index]);

    // Prepare data for variwide chart (combining EPS, company names, and net income)
    const barElts = companyNames.map((name, index) => {
        return {
            name: name,
            y: epsData[index],          // EPS value for y-axis
            z: netIncomeData[index],    // Net income for z-value (width)
            x: index                    // Position on x-axis
        };
    });

    $(document).ready(function() {
        try {
            // Initialize charts on page load
            pieChart();
            barChart();

            console.log(barElts);

            // Set up industry filter event handler
            $("#industrySelect").change(function() {
                const industryFiltered = $(this).val();
                // Submit the form when industry is selected
                $("#industryForm").submit();
            });

            // Initialize pagination
            initPagination();

        } catch (error) {
            console.error("Error initializing page:", error);
        }
    });

    // Pagination variables and functions
    let currentPage = 1;
    const rowsPerPage = 8;
    let totalPages = 1;

    function initPagination() {
        const rows = $('#dataTable tbody tr');
        totalPages = Math.ceil(rows.length / rowsPerPage);

        // Update total pages display
        $('#totalPages').text(totalPages);

        // Initial page display
        showPage(currentPage);
        updatePaginationButtons();

        // Attach event handlers to pagination buttons
        $('#prevButton').click(function() {
            if (currentPage > 1) {
                currentPage--;
                showPage(currentPage);
                updatePaginationButtons();
            }
        });

        $('#nextButton').click(function() {
            if (currentPage < totalPages) {
                currentPage++;
                showPage(currentPage);
                updatePaginationButtons();
            }
        });
    }

    function showPage(page) {
        const rows = $('#dataTable tbody tr');

        // Hide all rows
        rows.hide();

        // Calculate start and end indices for current page
        const startIndex = (page - 1) * rowsPerPage;
        const endIndex = startIndex + rowsPerPage;

        // Show rows for current page
        const currentPageRows = rows.slice(startIndex, endIndex);
        currentPageRows.show();

        // Update current page display
        $('#currentPage').text(page);

        // Update charts with data from current page rows only
        updateChartsWithCurrentPageData(currentPageRows);
    }

    // New function to extract data from current page rows and update charts
    function updateChartsWithCurrentPageData(currentPageRows) {
        // Initialize empty arrays for chart data
        const pageCompanyNames = [];
        const pageOperatingRevData = [];
        const pageOperatingProfitData = [];
        const pageNonOperatingData = [];
        const pageEpsData = [];
        const pageNetIncomeData = [];

        // Extract data from current page rows
        currentPageRows.each(function() {
            const cells = $(this).find('td');

            // Get values from table cells
            const companyName = cells.eq(1).text().trim();
            const eps = parseFloat(cells.eq(3).text().trim());
            const operatingRev = parseFloat(cells.eq(4).text().trim());
            const operatingProfit = parseFloat(cells.eq(5).text().trim());
            const nonOperating = parseFloat(cells.eq(6).text().trim());
            const netIncome = parseFloat(cells.eq(7).text().trim());

            // Add data to arrays
            pageCompanyNames.push(companyName);
            pageOperatingRevData.push(operatingRev);
            pageOperatingProfitData.push(operatingProfit);
            pageNonOperatingData.push(nonOperating);
            pageEpsData.push(eps);
            pageNetIncomeData.push(netIncome);
        });

        // Calculate operating costs for current page
        const pageOperatingCostData = pageOperatingRevData.map((rev, index) =>
            rev - pageOperatingProfitData[index]);

        // Create data for bar chart
        const pageBarElts = pageCompanyNames.map((name, index) => {
            return {
                name: name,
                y: pageEpsData[index],
                z: pageNetIncomeData[index],
                x: index
            };
        });

        // Update charts with new data
        updatePieChart(pageCompanyNames, pageOperatingCostData, pageOperatingProfitData, pageNonOperatingData);
        updateBarChart(pageCompanyNames, pageBarElts);
    }

    // Function to update pie chart with new data
    function updatePieChart(categories, costData, profitData, nonOperatingData) {
        const chart = Highcharts.charts.find(chart => chart && chart.renderTo.id === 'pie_chart');

        if (chart) {
            // Update categories
            chart.xAxis[0].setCategories(categories);

            // Update series data
            chart.series[0].setData(costData);
            chart.series[1].setData(profitData);
            chart.series[2].setData(nonOperatingData);
        }
    }

    // Function to update bar chart with new data
    function updateBarChart(categories, barData) {
        const chart = Highcharts.charts.find(chart => chart && chart.renderTo.id === 'bar_chart');

        if (chart) {
            // Update categories
            chart.xAxis[0].setCategories(categories);

            // Update series data
            chart.series[0].setData(barData);
        }
    }

    function updatePaginationButtons() {
        // Disable/enable previous button
        $('#prevButton').prop('disabled', currentPage === 1);

        // Disable/enable next button
        $('#nextButton').prop('disabled', currentPage === totalPages);
    }
</script>

<script>
    
</script>